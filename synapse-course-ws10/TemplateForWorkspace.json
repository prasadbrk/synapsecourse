{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-course-ws10"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_serverless_sql_pool_db_nyc_taxi_ldw'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-ws10-ondemand.sql.azuresynapse.net,1433;Initial Catalog=nyc_taxi_ldw"
		},
		"synapse-course-ws10-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-course-ws10-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-ws10.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_synapsecoursedl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecoursedl10.dfs.core.windows.net/"
		},
		"synapse-course-ws10-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecoursedl10.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetYearAndMonth",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "USE nyc_taxi_ldw;\n\nSELECT DISTINCT\n        year,\n        month\nFROM bronze.vw_trip_data_green_csv;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEachMthAndYearGold",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetYearAndMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetYearAndMonth').output.resultSets[0].rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "DeleteGoldFolders",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "CreateGoldMonthFolders",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeleteGoldFolders",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "createGoldViews",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEachMthAndYearGold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "NonQuery",
									"text": "DROP VIEW IF EXISTS gold.vw_trip_data_green;"
								},
								{
									"type": "NonQuery",
									"text": "\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n        result.filepath(1) as year,\n        result.filepath(2) as month,\n        result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) \n    with(\n            borough VARCHAR(15),\n            trip_date DATE,\n            trip_day_weekend_ind CHAR(1),\n            card_trip_count INT,\n            cash_trip_count INT,\n            street_hail_trip_count INT,\n            dispatch_trip_count INT,\n            trip_distance FLOAT,\n            trip_duration INT,\n            fare_amount FLOAT\n    ) AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-02T15:55:40Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach folder path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_path_usp_name_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Silver Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Silver Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"v_folder_path": {
						"type": "String",
						"defaultValue": "silver/taxi_zone"
					},
					"v_usp_name": {
						"type": "String",
						"defaultValue": "silver.usp_sivler_taxi_zone"
					},
					"v_folder_path_usp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"usp_name": "silver.usp_silver_vendor"
							},
							{
								"folder_path": "silver/rate_code",
								"usp_name": "silver.usp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"usp_name": "silver.usp_silver_payment_type"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-01T16:00:18Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone;"
								},
								{
									"type": "NonQuery",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\nWITH (\n    data_source = nyc_taxi_src,\n    LOCATION = 'silver/taxi_zone',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect  * from bronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-02T15:55:48Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-02T15:55:54Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "USE nyc_taxi_ldw;\n\nSELECT DISTINCT\n        year,\n        month\nFROM bronze.vw_trip_data_green_csv;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Month and year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Year and Month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "MonthAndYearFolders",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "CreatePartitions",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "MonthAndYearFolders",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "CreateSilverViews",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Month and year",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "NonQuery",
									"text": "DROP VIEW IF EXISTS silver.vw_trip_data_green;"
								},
								{
									"type": "NonQuery",
									"text": "\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n        result.filepath(1) as year,\n        result.filepath(2) as month,\n        result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) \n    with(\n            vendor_id INT\n           ,lpep_pickup_datetime DATETIME2(7)\n           ,lpep_dropoff_datetime DATETIME2(7)\n           ,store_and_fwd_flag CHAR(1)\n           ,rate_code_id INT\n           ,pu_location_id INT\n           ,do_location_id INT\n           ,passenger_count INT\n           ,trip_distance FLOAT\n           ,fare_amount FLOAT\n           ,extra FLOAT\n           ,mta_tax FLOAT\n           ,tip_amount FLOAT\n           ,tolls_amount FLOAT  \n           ,ehail_fee VARCHAR\n           ,improvement_surcharge FLOAT\n           ,total_amount FLOAT\n           ,payment_type INT\n           ,trip_type INT\n           ,congestion_surcharge FLOAT\n    ) AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-02T15:26:08Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_execution_sequence')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "create silver tables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "create silver trip data green",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "create gold trip data green",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "create silver tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "create silver trip data green",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_gold_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-02T15:55:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_tables')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_trip_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_gold_trip_data_green')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapsecoursedl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synapsecoursedl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-ws10-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-course-ws10-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-ws10-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-course-ws10-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n\nSELECT\n       borough, count(1)\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        data_source = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        first_row = 2\n    ) \n    WITH (\n        locationid smallint 1,\n        borough varchar(15) 2,\n        zone varchar(50) 3,\n        service_zone varchar(15) 4\n    )AS [result]\n    group by borough\n    having count(1) > 1;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.rate_code') IS NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code\n\nCREATE EXTERNAL TABLE silver.rate_code\nWITH (\n    data_source = nyc_taxi_src,\n    LOCATION = 'silver/rate_code',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT rate_code_id, rate_code\nFROM\n    OPENROWSET(\n        BULK 'raw/rate_code.json',\n        data_source = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        fieldterminator = '0x0b',\n        fieldquote = '0x0b',\n        rowterminator = '0x0b'\n    )\n    with(\n        jsonDoc nvarchar(max)\n    )as rate_code \n    CROSS APPLY openjson(jsonDoc)\n    with(\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(20)\n    );\n\n\nselect * from silver.rate_code;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type\n\nCREATE EXTERNAL TABLE silver.payment_type\nWITH (\n    data_source = nyc_taxi_src,\n    LOCATION = 'silver/payment_type',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT payment_type, payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'raw/payment_type.json',\n        data_source = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        fieldterminator = '0x0b',\n        fieldquote = '0x0b'\n    )\n    with(\n        jsonDoc nvarchar(max)\n    )as payment_type \n    CROSS APPLY openjson(jsonDoc)\n    with(\n        payment_type SMALLINT,\n        payment_type_desc VARCHAR(20)\n    )\n\n\nselect * from silver.payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_data_quality_checks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT\n MAX(total_amount) as max,\n MIN(total_amount) as min,\n AVG(total_amount) as avg,\n count(1) as count_total_amt,\n COUNT(total_amount) as count_blanks_total_amt  \nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) \nAS [result]\n\nSELECT\npayment_type, count(1)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) \nAS [result]\ngroup by payment_type\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\nEXEC silver.usp_silver_trip_data_green '2020','01' \nEXEC silver.usp_silver_trip_data_green '2020','02' \nEXEC silver.usp_silver_trip_data_green '2020','03' \nEXEC silver.usp_silver_trip_data_green '2020','04' \nEXEC silver.usp_silver_trip_data_green '2020','05' \nEXEC silver.usp_silver_trip_data_green '2020','06' \nEXEC silver.usp_silver_trip_data_green '2020','07' \nEXEC silver.usp_silver_trip_data_green '2020','08' \nEXEC silver.usp_silver_trip_data_green '2020','09' \nEXEC silver.usp_silver_trip_data_green '2020','10' \nEXEC silver.usp_silver_trip_data_green '2020','11' \nEXEC silver.usp_silver_trip_data_green '2020','12' \nEXEC silver.usp_silver_trip_data_green '2021','01' \nEXEC silver.usp_silver_trip_data_green '2021','02' \nEXEC silver.usp_silver_trip_data_green '2021','03' \nEXEC silver.usp_silver_trip_data_green '2021','04' \nEXEC silver.usp_silver_trip_data_green '2021','05' \nEXEC silver.usp_silver_trip_data_green '2021','06' ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nSELECT taxi_zone.borough, count(1) as number_of_trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\n    JOIN\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        data_source = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        first_row = 2\n    ) \n    WITH (\n        locationid smallint 1,\n        borough varchar(15) 2,\n        zone varchar(50) 3,\n        service_zone varchar(15) 4\n    )AS taxi_zone\non trip_data.PULocationID = taxi_zone.locationid\ngroup by taxi_zone.borough;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nDROP VIEW IF EXISTS silver.vw_trip_data_green\nGO\n\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n        result.filepath(1) as year,\n        result.filepath(2) as month,\n        result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) \n    with(\n            vendor_id INT\n           ,lpep_pickup_datetime DATETIME2(7)\n           ,lpep_dropoff_datetime DATETIME2(7)\n           ,store_and_fwd_flag CHAR(1)\n           ,rate_code_id INT\n           ,pu_location_id INT\n           ,do_location_id INT\n           ,passenger_count INT\n           ,trip_distance FLOAT\n           ,fare_amount FLOAT\n           ,extra FLOAT\n           ,mta_tax FLOAT\n           ,tip_amount FLOAT\n           ,tolls_amount FLOAT  \n           ,ehail_fee VARCHAR\n           ,improvement_surcharge FLOAT\n           ,total_amount FLOAT\n           ,payment_type INT\n           ,trip_type INT\n           ,congestion_surcharge FLOAT\n    ) AS [result]\nGO\n\nSELECT TOP(100) * FROM silver.vw_trip_data_green\nGO\n\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_simple_transformation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n\nSELECT\n       DATEDIFF(MINUTE, lpep_pickup_datetime,lpep_dropoff_datetime)/60 as from_hour,\n       DATEDIFF(MINUTE, lpep_pickup_datetime,lpep_dropoff_datetime)/60 + 1 as to_hour,\n       COUNT(1) as number_of_trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\nGROUP BY DATEDIFF(MINUTE, lpep_pickup_datetime,lpep_dropoff_datetime)/60,\n       (DATEDIFF(MINUTE, lpep_pickup_datetime,lpep_dropoff_datetime)/60) + 1\nORDER BY from_hour, to_hour;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nSELECT \n        td.year,\n        td.month,\n        tz.borough,\n        convert(date, td.lpep_pickup_datetime) AS trip_date,\n        cal.day_name AS trip_day,\n        CASE WHEN cal.day_name IN ('Saturday', 'Sunday') THEN 'Y' ELSE 'N'  END AS trip_day_weekend_ind,\n        SUM(CASE WHEN pt.payment_type_desc = 'Credit Card' THEN 1 ELSE 0 END) as card_trip_count,\n        SUM(CASE WHEN pt.payment_type_desc = 'Cash' THEN 1 ELSE 0 END) as cash_trip_count\n    FROM silver.vw_trip_data_green td\n    JOIN silver.taxi_zone tz ON (td.pu_location_id = tz.locationid)\n    JOIN silver.calendar cal on (convert(date, td.lpep_pickup_datetime) = cal.date)\n    JOIN silver.payment_type pt on (td.payment_type = pt.payment_type)\n  WHERE td.year = '2020'\n    AND td.month = '01'\nGROUP BY td.year,\n        td.month,\n        tz.borough,\n        convert(date, td.lpep_pickup_datetime),\n        cal.day_name\n\nUSE nyc_taxi_ldw\nGO\nEXEC gold.usp_gold_trip_data_green '2020','01' \nEXEC gold.usp_gold_trip_data_green '2020','02' \nEXEC gold.usp_gold_trip_data_green '2020','03' \nEXEC gold.usp_gold_trip_data_green '2020','04' \nEXEC gold.usp_gold_trip_data_green '2020','05' \nEXEC gold.usp_gold_trip_data_green '2020','06' \nEXEC gold.usp_gold_trip_data_green '2020','07' \nEXEC gold.usp_gold_trip_data_green '2020','08' \nEXEC gold.usp_gold_trip_data_green '2020','09' \nEXEC gold.usp_gold_trip_data_green '2020','10' \nEXEC gold.usp_gold_trip_data_green '2020','11' \nEXEC gold.usp_gold_trip_data_green '2020','12' \nEXEC gold.usp_gold_trip_data_green '2021','01' \nEXEC gold.usp_gold_trip_data_green '2021','02' \nEXEC gold.usp_gold_trip_data_green '2021','03' \nEXEC gold.usp_gold_trip_data_green '2021','04' \nEXEC gold.usp_gold_trip_data_green '2021','05' \nEXEC gold.usp_gold_trip_data_green '2021','06' ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_discovery_assignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_views_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nDROP VIEW IF EXISTS gold.vw_trip_data_green\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n        result.filepath(1) as year,\n        result.filepath(2) as month,\n        result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) \n    with(\n            borough VARCHAR(15),\n            trip_date DATE,\n            trip_day_weekend_ind CHAR(1),\n            card_trip_count INT,\n            cash_trip_count INT,\n            street_hail_trip_count INT,\n            dispatch_trip_count INT,\n            trip_distance FLOAT,\n            trip_duration INT,\n            fare_amount FLOAT\n    ) AS [result]\nGO\n\nSELECT * FROM gold.vw_trip_data_green\nGO\n\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE master\nGO\n\nCREATE DATABASE nyc_taxi_ldw    \nGO\n\nALTER DATABASE nyc_taxi_ldw COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\nUSE nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedl10.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        LocationID smallint,\n        Borough varchar(15),\n        Zone varchar(50),\n        service_zone varchar(15)\n    )AS [result]\n\n-- have a look a the metadata\nEXEC sp_describe_first_result_set N'SELECT\n    *\nFROM\n    OPENROWSET(\n        BULK ''https://synapsecoursedl10.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        LocationID smallint,\n        Borough varchar(15),\n        Zone varchar(50),\n        service_zone varchar(15)\n    )AS [result]'\n\nSELECT name, collation_name from sys.databases;\n\nCREATE DATABASE nyc_taxi_discovery;\n\nUSE nyc_taxi_discovery;\n\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n-- read data from files without header\n\ndrop external data source nyc_taxi_data\n\ncreate external data source nyc_taxi_data_raw\nwith (\n     location = 'https://synapsecoursedl10.dfs.core.windows.net/nyc-taxi-data/raw'\n)\n\nSELECT\n        *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        data_source = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        first_row = 2\n    ) \n    WITH (\n        locationid smallint 1,\n        borough varchar(15) 2,\n        zone varchar(50) 3,\n        service_zone varchar(15) 4\n    )AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n\n    SET @create_sql_stmt =\n    'CREATE EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month +\n    ' WITH (\n        data_source = nyc_taxi_src,\n        LOCATION = ''silver/trip_data_green/year=' + @year + '/month=' + @month + ''',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    select  [VendorID] as vendor_id\n           ,[lpep_pickup_datetime]\n           ,[lpep_dropoff_datetime]\n           ,[store_and_fwd_flag]\n           ,[total_amount]\n           ,[payment_type]\n           ,[trip_type]\n           ,[congestion_surcharge]\n           ,[extra]\n           ,[mta_tax]\n           ,[tip_amount]\n           ,[tolls_amount]\n           ,[ehail_fee]\n           ,[improvement_surcharge]\n           ,[RatecodeID] as rate_code_id\n           ,[PULocationID] as pu_location_id\n           ,[DOLocationID] as do_location_id\n           ,[passenger_count]\n           ,[trip_distance]\n           ,[fare_amount]\n    from bronze.vw_trip_data_green_csv\n    where year = ''' + @year + ''' and\n            month = ''' + @month + '''';\n    \n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt =\n    'DROP EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month;\n    print(@drop_sql_stmt)\n\n    EXEC sp_executesql @drop_sql_stmt;\nEND;  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_data_sources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF NOT EXISTS(select * from sys.external_data_sources where name = 'nyc_taxi_src' )\nCREATE EXTERNAL DATA SOURCE nyc_taxi_src\nWITH\n(\n    LOCATION = 'https://synapsecoursedl10.dfs.core.windows.net/nyc-taxi-data'\n);\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "select * from \nopenrowset( \n    bulk 'calendar.csv',\n    data_source = 'nyc_taxi_data_raw',\n    format = 'csv',\n    parser_version = '2.0',\n    header_row = true\n\n) \nwith\n(\n    date_key    int,\n    date        date,\n    year        smallint,\n    month       tinyint,\n    day         tinyint,\n    day_name    varchar(10),\n    day_of_year smallint,\n    week_of_month tinyint,\n    week_of_year    tinyint,\n    month_name      varchar(10),\n    year_month      int,\n    year_week       int\n) as cal;\n\nexec sp_describe_first_result_set N'select * from \nopenrowset( \n    bulk ''calendar.csv'',\n    data_source = ''nyc_taxi_data_raw'',\n    format = ''csv'',\n    parser_version = ''2.0'',\n    header_row = true\n\n) \nwith\n(\n    date_key    int,\n    date        date,\n    year        smallint,\n    month       tinyint,\n    day         tinyint,\n    day_name    varchar(10),\n    day_of_year smallint,\n    week_of_month tinyint,\n    week_of_year    tinyint,\n    month_name      varchar(10),\n    year_month      int,\n    year_week       int\n) as cal'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n\n    SET @create_sql_stmt =\n    'CREATE EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month +\n    ' WITH (\n        data_source = nyc_taxi_src,\n        LOCATION = ''gold/trip_data_green/year=' + @year + '/month=' + @month + ''',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    SELECT \n        td.year,\n        td.month,\n        tz.borough,\n        convert(date, td.lpep_pickup_datetime) AS trip_date,\n        cal.day_name AS trip_day,\n        CASE WHEN cal.day_name IN (''Saturday'', ''Sunday'') THEN ''Y'' ELSE ''N''  END AS trip_day_weekend_ind,\n        SUM(CASE WHEN pt.payment_type_desc = ''Credit card'' THEN 1 ELSE 0 END) as card_trip_count,\n        SUM(CASE WHEN pt.payment_type_desc = ''Cash'' THEN 1 ELSE 0 END) as cash_trip_count,\n        SUM(CASE WHEN tt.trip_type_desc = ''Street-hail'' THEN 1 ELSE 0 END) as street_hail_trip_count,\n        SUM(CASE WHEN tt.trip_type_desc = ''Dispatch'' THEN 1 ELSE 0 END) as dispatch_trip_count,\n        SUM(td.trip_distance) AS trip_distance,\n        SUM(DATEDIFF(MINUTE, td.lpep_pickup_datetime, td.lpep_dropoff_datetime)) AS trip_duration,\n        SUM(td.fare_amount) AS fare_amount\n    FROM silver.vw_trip_data_green td\n    JOIN silver.taxi_zone tz ON (td.pu_location_id = tz.locationid)\n    JOIN silver.calendar cal on (convert(date, td.lpep_pickup_datetime) = cal.date)\n    JOIN silver.payment_type pt on (td.payment_type = pt.payment_type)\n    JOIN silver.trip_type tt on (td.trip_type = tt.trip_type)\n    where td.year = ''' + @year + ''' and\n            td.month = ''' + @month + '''\n    GROUP BY td.year,\n        td.month,\n        tz.borough,\n        convert(date, td.lpep_pickup_datetime),\n        cal.day_name            ';\n    \n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt =\n    'DROP EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month;\n    print(@drop_sql_stmt)\n\n    EXEC sp_executesql @drop_sql_stmt;\nEND;  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nif NOT EXISTS(select * from sys.external_file_formats where name = 'csv_file_format' )\n-- Create an external file format for DELIMITED (CSV/TSV) files.\nCREATE EXTERNAL FILE FORMAT csv_file_format\nWITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\nformat_options (\n    FIELD_TERMINATOR = ','\n    , STRING_DELIMITER = '\"'\n    , First_Row = 2\n    , USE_TYPE_DEFAULT = FALSE\n    , Encoding = 'UTF8'\n    , PARSER_VERSION = '2.0')\n);\n\nif NOT EXISTS(select * from sys.external_file_formats where name = 'csv_file_format_pv1' )\nCREATE EXTERNAL FILE FORMAT csv_file_format_pv1\nWITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\nformat_options (\n    FIELD_TERMINATOR = ','\n    , STRING_DELIMITER = '\"'\n    , First_Row = 2\n    , USE_TYPE_DEFAULT = FALSE\n    , Encoding = 'UTF8'\n    , PARSER_VERSION = '1.0')\n);\n\n\nif NOT EXISTS(select * from sys.external_file_formats where name = 'tsv_file_format' )\nCREATE EXTERNAL FILE FORMAT tsv_file_format\nWITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\nformat_options (\n    FIELD_TERMINATOR = '\\t'\n    , STRING_DELIMITER = '\"'\n    , First_Row = 2\n    , USE_TYPE_DEFAULT = FALSE\n    , Encoding = 'UTF8'\n    , PARSER_VERSION = '2.0')\n);\n\n\nif NOT EXISTS(select * from sys.external_file_formats where name = 'tsv_file_format_pv1' )\nCREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\nWITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\nformat_options (\n    FIELD_TERMINATOR = '\\t'\n    , STRING_DELIMITER = '\"'\n    , First_Row = 2\n    , USE_TYPE_DEFAULT = FALSE\n    , Encoding = 'UTF8'\n    , PARSER_VERSION = '1.0')\n);\n\n\nif NOT EXISTS(select * from sys.external_file_formats where name = 'parquet_file_format' )\nCREATE EXTERNAL FILE FORMAT parquet_file_format  \nWITH (  \n    FORMAT_TYPE = PARQUET,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n     );  \n\n\nif NOT EXISTS(select * from sys.external_file_formats where name = 'delta_file_format' )\n     CREATE EXTERNAL FILE FORMAT delta_file_format\nWITH (\n         FORMAT_TYPE = DELTA,\n         DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n      );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\nAS\nBEGIN\n    IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n        DROP EXTERNAL TABLE silver.taxi_zone;\n\n    CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH (\n        data_source = nyc_taxi_src,\n        LOCATION = 'silver/taxi_zone',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    select  * from bronze.taxi_zone;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone \n\nCREATE EXTERNAL TABLE bronze.taxi_zone\n(\n        locationid smallint,\n        borough varchar(15),\n        zone varchar(50),\n        service_zone varchar(15)\n)\nWITH (\n    LOCATION = 'raw/taxi_zone.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/taxi_zone'\n);\n\nselect top 100 * from bronze.taxi_zone;\n\n\nUSE nyc_taxi_ldw;\n\nIF OBJECT_ID('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar\n\nCREATE EXTERNAL TABLE bronze.calendar\n(\ndate_key    int,\n    date        date,\n    year        smallint,\n    month       tinyint,\n    day         tinyint,\n    day_name    varchar(10),\n    day_of_year smallint,\n    week_of_month tinyint,\n    week_of_year    tinyint,\n    month_name      varchar(10),\n    year_month      int,\n    year_week       int\n)\nWITH (\n    LOCATION = 'raw/calendar.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/calendar'\n);\n\nselect top 100 * from bronze.calendar;\n\n\nIF OBJECT_ID('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor\n\nCREATE EXTERNAL TABLE bronze.vendor\n(\nvendor_id    int,\nvendor_name varchar(50)\n)\nWITH (\n    LOCATION = 'raw/vendor.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/vendor'\n);\n\nselect top 100 * from bronze.vendor;\n\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type\n\nCREATE EXTERNAL TABLE bronze.trip_type\n(\ntrip_type    int,\ntrip_type_desc varchar(50)\n)\nWITH (\n    LOCATION = 'raw/trip_type.tsv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = tsv_file_format,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/trip_type'\n);\n\nselect top 100 * from bronze.trip_type;\n\n\n\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv\n(\n VendorID int,\nlpep_pickup_datetime datetime2(7),\nlpep_dropoff_datetime datetime2(7),\nstore_and_fwd_flag varchar(1),\nRatecodeID int,\nPULocationID int,\nDOLocationID int,\npassenger_count int,\ntrip_distance float,\nfare_amount float,\nextra float,\nmta_tax float,\ntip_amount float,\ntolls_amount float,\nehail_fee int,\nimprovement_surcharge float,\ntotal_amount float,\npayment_type int,\ntrip_type int,\ncongestion_surcharge float,\nyear varchar(4),\nmonth varchar(2)\n)\nWITH (\n    LOCATION = 'raw/trip_data_green_csv/**',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format\n);\n\nselect top 100 * from bronze.trip_data_green_csv;\n\n\n\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet\n(\n VendorID int,\nlpep_pickup_datetime datetime2(7),\nlpep_dropoff_datetime datetime2(7),\nstore_and_fwd_flag varchar(1),\nRatecodeID int,\nPULocationID int,\nDOLocationID int,\npassenger_count int,\ntrip_distance float,\nfare_amount float,\nextra float,\nmta_tax float,\ntip_amount float,\ntolls_amount float,\nehail_fee int,\nimprovement_surcharge float,\ntotal_amount float,\npayment_type int,\ntrip_type int,\ncongestion_surcharge float,\nyear varchar(4),\nmonth varchar(2)\n)\nWITH (\n    LOCATION = 'raw/trip_data_green_parquet/**',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format,\n);\n\nselect top 100 * from bronze.trip_data_green_parquet;\n\n\nIF OBJECT_ID('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta\n(\n VendorID int,\nlpep_pickup_datetime datetime2(7),\nlpep_dropoff_datetime datetime2(7),\nstore_and_fwd_flag varchar(1),\nRatecodeID int,\nPULocationID int,\nDOLocationID int,\npassenger_count int,\ntrip_distance float,\nfare_amount float,\nextra float,\nmta_tax float,\ntip_amount float,\ntolls_amount float,\nehail_fee int,\nimprovement_surcharge float,\ntotal_amount float,\npayment_type int,\ntrip_type int,\ncongestion_surcharge float,\nyear varchar(4),\nmonth varchar(2)\n)\nWITH (\n    LOCATION = 'raw/trip_data_green_delta',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = delta_file_format,\n);\n\nselect top 100 * from bronze.trip_data_green_delta;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nSELECT\n        *\nFROM\n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        data_source = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        header_row = true,\n        fieldterminator = '\\t'\n    ) as trip_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_calendar\nAS\nBEGIN\n    IF OBJECT_ID('silver.calendar') IS NOT NULL\n        DROP EXTERNAL TABLE silver.calendar;\n\n    CREATE EXTERNAL TABLE silver.calendar\n    WITH (\n        data_source = nyc_taxi_src,\n        LOCATION = 'silver/calendar',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    select  * from bronze.calendar;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nDROP VIEW IF EXISTS bronze.rate_code \nGO\n\nCREATE VIEW bronze.rate_code\nAS  \nSELECT rate_code_id, rate_code\nFROM\n    OPENROWSET(\n        BULK 'raw/rate_code.json',\n        data_source = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        fieldterminator = '0x0b',\n        fieldquote = '0x0b',\n        rowterminator = '0x0b'\n    )\n    with(\n        jsonDoc nvarchar(max)\n    )as rate_code \n    CROSS APPLY openjson(jsonDoc)\n    with(\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(20)\n    )\n    GO\n\nSELECT TOP 100 * FROM bronze.rate_code\nGO\n\n\n\nDROP VIEW IF EXISTS bronze.payment_type \nGO\n\nCREATE VIEW bronze.payment_type\nAS  \n   SELECT payment_type, payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'raw/payment_type.json',\n        data_source = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        fieldterminator = '0x0b',\n        fieldquote = '0x0b'\n    )\n    with(\n        jsonDoc nvarchar(max)\n    )as payment_type \n    CROSS APPLY openjson(jsonDoc)\n    with(\n        payment_type SMALLINT,\n        payment_type_desc VARCHAR(20)\n    )\n    GO\n\nSELECT TOP 100 * FROM bronze.payment_type\nGO\n\n\nCREATE VIEW bronze.vw_trip_data_green_csv\nAS\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGO\n\nSELECT COUNT(1) FROM bronze.vw_trip_data_green_csv\nWHERE year = '2020' AND month = '01'\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nSELECT\n      cast(json_value(jsondoc, '$.payment_type') as smallint) payment_type,\n      cast(json_value(jsondoc, '$.payment_type_desc') as varchar(15)) payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        data_source = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        fieldterminator = '0x0b',\n        fieldquote = '0x0b',\n        rowterminator = '0x0a'\n    ) \n    with(\n        jsonDoc nvarchar(max)\n    )\n    as payment_type;\n\n-- use OpenJson function example\n\n    SELECT payment_type, payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        data_source = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        fieldterminator = '0x0b',\n        fieldquote = '0x0b'\n    )\n    with(\n        jsonDoc nvarchar(max)\n    )as payment_type \n    CROSS APPLY openjson(jsonDoc)\n    with(\n        payment_type SMALLINT,\n        payment_type_desc VARCHAR(20)\n    )\n    ;\n-- use OpenJson function to explode an array\n\n    SELECT payment_type, payment_type_desc_value\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        data_source = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        fieldterminator = '0x0b',\n        fieldquote = '0x0b'\n    )\n    with(\n        jsonDoc nvarchar(max)\n    )as payment_type \n    CROSS APPLY openjson(jsonDoc)\n    with(\n        payment_type SMALLINT,\n        payment_type_desc NVARCHAR(MAX) as JSON\n    )\n    CROSS APPLY openjson(payment_type_desc)\n    WITH\n    (\n        sub_type SMALLINT,\n        payment_type_desc_value VARCHAR(20) '$.value'   \n    )\n    ;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_usp_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_type\nAS\nBEGIN\n    IF OBJECT_ID('silver.trip_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.trip_type;\n\n    CREATE EXTERNAL TABLE silver.trip_type\n    WITH (\n        data_source = nyc_taxi_src,\n        LOCATION = 'silver/trip_type',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    select  * from bronze.trip_type;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone\n\nCREATE EXTERNAL TABLE silver.taxi_zone\nWITH (\n    data_source = nyc_taxi_src,\n    LOCATION = 'silver/taxi_zone',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect  * from bronze.taxi_zone\n\n\nselect * from silver.taxi_zone;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n SELECT rate_code_id, rate_code\nFROM\n    OPENROWSET(\n        BULK 'rate_code.json',\n        data_source = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        fieldterminator = '0x0b',\n        fieldquote = '0x0b',\n        rowterminator = '0x0b'\n    )\n    with(\n        jsonDoc nvarchar(max)\n    )as rate_code \n    CROSS APPLY openjson(jsonDoc)\n    with(\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(20)\n    )\n    ;\n\n-- read multiline json \n     SELECT rate_code_id, rate_code\nFROM\n    OPENROWSET(\n        BULK 'rate_code_multi_line.json',\n        data_source = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        fieldterminator = '0x0b',\n        fieldquote = '0x0b',\n        rowterminator = '0x0b'\n    )\n    with(\n        jsonDoc nvarchar(max)\n    )as rate_code \n    CROSS APPLY openjson(jsonDoc)\n    with(\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(20)\n    )\n    ;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_usp_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_vendor\nAS\nBEGIN\n    IF OBJECT_ID('silver.vendor') IS NOT NULL\n        DROP EXTERNAL TABLE silver.vendor;\n\n    CREATE EXTERNAL TABLE silver.vendor\n    WITH (\n        data_source = nyc_taxi_src,\n        LOCATION = 'silver/vendor',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    select  * from bronze.vendor;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar\n\nCREATE EXTERNAL TABLE silver.calendar\nWITH (\n    data_source = nyc_taxi_src,\n    LOCATION = 'silver/calendar',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect  * from bronze.calendar\n\n\nselect * from silver.calendar;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n-- This is auto-generated code\nSELECT\n    result.filename() as filename,\n    COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGROUP BY result.filename();\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_usp_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_rate_code\nAS\nBEGIN\n    IF OBJECT_ID('silver.rate_code') IS NOT NULL\n        DROP EXTERNAL TABLE silver.rate_code;\n\n    CREATE EXTERNAL TABLE silver.rate_code\n    WITH (\n        data_source = nyc_taxi_src,\n        LOCATION = 'silver/rate_code',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    select  * from bronze.rate_code;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type\n\nCREATE EXTERNAL TABLE silver.trip_type\nWITH (\n    data_source = nyc_taxi_src,\n    LOCATION = 'silver/trip_type',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect  * from bronze.trip_type\n\n\nselect * from silver.trip_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) \n    WITH(\n        tip_amount FLOAT,\n        trip_type   INT\n    )AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_usp_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_payment_type\nAS\nBEGIN\n    IF OBJECT_ID('silver.payment_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.payment_type;\n\n    CREATE EXTERNAL TABLE silver.payment_type\n    WITH (\n        data_source = nyc_taxi_src,\n        LOCATION = 'silver/payment_type',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    select  * from bronze.payment_type;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_data_green\nGO\n\nCREATE EXTERNAL TABLE silver.trip_data_green\nWITH (\n    data_source = nyc_taxi_src,\n    LOCATION = 'silver/trip_data_green',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect  * from bronze.trip_data_green_csv\n\n\nselect top 100 * from silver.trip_data_green;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE silver.vendor\n\nCREATE EXTERNAL TABLE silver.vendor\nWITH (\n    data_source = nyc_taxi_src,\n    LOCATION = 'silver/vendor',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect  * from bronze.vendor\n\n\nselect * from silver.vendor;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nselect top 100 * \nfrom OPENROWSET(\n    BULK 'trip_data_green_delta/',\n    data_source = 'nyc_taxi_data_raw',\n    format = 'DELTA'\n\n) \nwith(\ntip_amount float,\ntrip_type int,\nyear varchar(4),\nmonth varchar(2)\n)as trip_data\n\nEXEC sp_describe_first_result_set N'select top 100 * \nfrom OPENROWSET(\n    BULK ''trip_data_green_delta/'',\n    data_source = ''nyc_taxi_data_raw'',\n    format = ''DELTA''\n\n)with(\nVendorID int,\nlpep_pickup_datetime datetime2(7),\nlpep_dropoff_datetime datetime2(7),\nstore_and_fwd_flag varchar(1),\nRatecodeID int,\nPULocationID int,\nDOLocationID int,\npassenger_count int,\ntrip_distance float,\nfare_amount float,\nextra float,\nmta_tax float,\ntip_amount float,\ntolls_amount float,\nehail_fee int,\nimprovement_surcharge float,\ntotal_amount float,\npayment_type int,\ntrip_type int,\ncongestion_surcharge float,\nyear varchar(4),\nmonth varchar(2)\n)as trip_data'\n\n\nselect count(distinct payment_type) \nfrom OPENROWSET(\n    BULK 'trip_data_green_delta/',\n    data_source = 'nyc_taxi_data_raw',\n    format = 'DELTA'\n\n) \nas trip_data\nwhere year = '2020' and month = '01';\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/set_serverless_cost_control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "SELECT * FROM sys.dm_external_data_processed;\n\nSELECT * FROM sys.configurations \nWHERE name LIKE 'Data Processed %';\n\nsp_set_data_processed_limit \n    @type = N'monthly',\n    @limit_tb = 2;\n\nsp_set_data_processed_limit \n    @type = N'weekly',\n    @limit_tb = 1;\n\nsp_set_data_processed_limit \n    @type = N'daily',\n    @limit_tb = 1;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_spark_create_gold_trip_data_green_agg')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "CoursePool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "81735a59-3b8a-46c7-b172-f2423a98043e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/2aedab55-d978-4c43-a12f-40c64defa2ed/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-ws10/bigDataPools/CoursePool",
						"name": "CoursePool",
						"type": "Spark",
						"endpoint": "https://synapse-course-ws10.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/CoursePool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Trip Data Aggregation \n",
							"### Group By Columns\n",
							"1. year\n",
							"2. Month\n",
							"3. Pickup Location ID\n",
							"4. Drop Off Location ID\n",
							"\n",
							"### Aggregated Columns\n",
							"1. Total Trip Count\n",
							"2. Total Fare Amount\n",
							"\n",
							"### Purpose of the notebook\n",
							"\n",
							"Demonstrate the integration between Spark Pool and Serverless SQL Pool\n",
							"\n",
							"1. Create the aggregated table in Spark Pool\n",
							"2. Access the data from Serverless SQL Pool "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the folder paths so that it can be used later. \n",
							"bronze_folder_path = 'abfss://nyc-taxi-data@synapsecoursedl.dfs.core.windows.net/raw'\n",
							"silver_folder_path = 'abfss://nyc-taxi-data@synapsecoursedl.dfs.core.windows.net/silver'\n",
							"gold_folder_path = 'abfss://nyc-taxi-data@synapsecoursedl.dfs.core.windows.net/gold'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the spark config to be able to get the partitioned columns year and month as strings rather than integers\n",
							"spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"\n",
							"-- Create database to which we are going to write the data\n",
							"\n",
							"CREATE DATABASE IF NOT EXISTS nyc_taxi_ldw_spark\n",
							"LOCATION 'abfss://nyc-taxi-data@synapsecoursedl.dfs.core.windows.net/gold';"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read the silver data to be processed. \n",
							"trip_data_green_df = spark.read.parquet(f\"{silver_folder_path}/trip_data_green\") "
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations\n",
							"# 1. Total trip count\n",
							"# 2. Total fare amount\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"trip_data_green_agg_df = trip_data_green_df \\\n",
							"                        .groupBy(\"year\", \"month\", \"pu_location_id\", \"do_location_id\") \\\n",
							"                        .agg(count(lit(1)).alias(\"total_trip_count\"),\n",
							"                        round(sum(\"fare_amount\"), 2).alias(\"total_fare_amount\"))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write the aggregated data to the gold table for consumption\n",
							"\n",
							"trip_data_green_agg_df.write.mode(\"overwrite\").partitionBy(\"year\", \"month\").format(\"parquet\").saveAsTable(\"nyc_taxi_ldw_spark.trip_data_green_agg\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CoursePool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southeastasia"
		}
	]
}